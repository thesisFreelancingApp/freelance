// Datasource et Générateur
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Modèles d'Authentification
model AuthUser {
  id        String   @id
  email     String   @unique
  name      String?
  account   Account?
  profile   Profile? @relation("ProfileAuthUser")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int      @id @default(autoincrement())
  lastProvider      String?
  providers         String[]
  providerAccountId String?
  userEmail         String   @unique
  user              AuthUser @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Profils Utilisateurs et Rôles
model Profile {
  id            String   @id
  authUser      AuthUser @relation("ProfileAuthUser", fields: [id], references: [id], onDelete: Cascade)
  firstName     String?
  lastName      String?
  profilePic    String?
  role          String?
  phoneNumber   String?
  address       String?
  bio           String?
  birthDate     DateTime?
  username      String   @unique
  userEmail     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  seller        Seller?
  buyer         Buyer?
  messages      Message[] @relation("MessageSender")
  notifications Notification[]
  chatRooms     ChatRoomParticipant[] @relation("ProfileChatRooms")
}

model Seller {
  id                String   @id
  profileId         String   @unique
  language          String[]
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  sellerRating      Float?
  totalEarnings     Float    @default(0.0)
  createdServices   Service[] @relation("CreatedServices")
  proposals         Proposal[] @relation("SellerProposals") // Correction ici
  freelancerRatings Rating[] @relation("FreelancerRatings")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Buyer {
  id                String   @id
  profileId         String   @unique
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  totalSpent        Float    @default(0.0)
  customRequests    CustomServiceRequest[] @relation("BuyerCustomRequests") // Correction ici
  purchasedServices Service[] @relation("PurchasedServices")
  buyerRatings      Rating[]  @relation("BuyerRatings")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Modèles de Service
model Service {
  id                 String     @id  @default(uuid())

  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  images        String[]
  tags          String[]
  
  // Relations
  creator       Seller  @relation("CreatedServices", fields: [creatorId], references: [id])
  creatorId     String
  buyers        Buyer[] @relation("PurchasedServices")
  ratings       Rating[]  @relation("ServiceRatings")
  packages      ServicePackage[]
}

model ServicePackage {
  id                 String     @id  @default(uuid())

  serviceId    Int
  name         String
  description  String
  price        Decimal  @db.Decimal(10, 2)
  deliveryTime Int
  revisions    Int
  features     String[]

  service      Service  @relation(fields: [serviceId], references: [id])
}

// Modèle de Notation
model Rating {
  id                 String     @id  @default(uuid())

  buyerId    String
  sellerId   String
  serviceId  Int?
  rating     Int
  review     String?
  createdAt  DateTime @default(now())

  // Relations
  buyer      Buyer   @relation("BuyerRatings", fields: [buyerId], references: [id])
  seller     Seller  @relation("FreelancerRatings", fields: [sellerId], references: [id])
  service    Service? @relation("ServiceRatings", fields: [serviceId], references: [id])
}

// Modèles de Chat
model ChatRoom {
  id                 String     @id  @default(uuid())

  title        String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  participants ChatRoomParticipant[]  @relation("ChatRoomParticipants")
  messages     Message[]
}

model ChatRoomParticipant {
  id                 String     @id  @default(uuid())

  chatRoomId    Int
  participantId String
  role          String
  
  // Relations
  chatRoom      ChatRoom  @relation("ChatRoomParticipants", fields: [chatRoomId], references: [id])
  profile       Profile   @relation("ProfileChatRooms", fields: [participantId], references: [id])

  createdAt     DateTime  @default(now())
}

model Message {
  id                 String     @id  @default(uuid())

  chatRoomId String
  senderId   String
  content    String
  createdAt  DateTime @default(now())

  // Relations
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  sender     Profile  @relation("MessageSender", fields: [senderId], references: [id])
}

// Catégories
model MainCategories {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  level       Int
  parentId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      MainCategories?  @relation("Hierarchy", fields: [parentId], references: [id])
  children    MainCategories[] @relation("Hierarchy")
}

// Notifications
model Notification {
  id                 String     @id  @default(uuid())

  recipientId  String
  type         String
  content      String?
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())

  // Relations
  recipient    Profile  @relation(fields: [recipientId], references: [id])
}

// Demandes de Services Personnalisés
model CustomServiceRequest {
  id                 String     @id  @default(uuid())

  buyerId      String
  title        String
  description  String
  budget       Decimal   @db.Decimal(10, 2)
  status       RequestStatus @default(PENDING)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  buyer        Buyer     @relation("BuyerCustomRequests", fields: [buyerId], references: [id], onDelete: Cascade) // Correction ici
  proposals    Proposal[]
}

model Proposal {
  id                 String     @id  @default(uuid())
  customRequestId    Int
  sellerId           String
  proposedPrice      Decimal   @db.Decimal(10, 2)
  message            String?
  status             String    @default("PENDING")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  customRequest      CustomServiceRequest @relation(fields: [customRequestId], references: [id], onDelete: Cascade)
  seller             Seller               @relation("SellerProposals", fields: [sellerId], references: [id], onDelete: Cascade) // Correction ici
}

// Enums
enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
