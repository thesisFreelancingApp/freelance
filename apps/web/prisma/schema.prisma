// Prisma schema file: https://pris.ly/d/prisma-schema
// Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

//
// Models
//

// AuthUser model (user)
model AuthUser {
  id        String   @id // Primary key, coming from Supabase
  email     String   @unique
  name      String?
  account   Account? // One-to-one with OAuth account
  profile   Profile? @relation("ProfileAuthUser")
  profileByEmail Profile? @relation("ProfileUser")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Profile model (user profile)
model Profile {
  id            String   @id
  authUser      AuthUser @relation("ProfileAuthUser", fields: [id], references: [id], onDelete: Cascade)
  firstName     String?
  lastName      String?
  profilePic    String?
  role          Role?
  level         Level?
  plan          Plan?
  skills        String?
  languages     String?
  education     String?
  certifications String?
  jobs          Jobs?
  phoneNumber   String?
  address       String?
  bio           String?
  birthDate     DateTime?
  userEmail     String   @unique // Foreign key for AuthUser
  user          AuthUser @relation("ProfileUser", fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Many-to-many relation with CategoryHierarchy
  categories    CategoryHierarchy[] @relation("ProfileCategories")

  // Service relations
  services      Service[]           @relation("UserServices")

  // Rating relations
  buyerRatings      Rating[] @relation("BuyerRatings")
  freelancerRatings Rating[] @relation("FreelancerRatings")
  ratedServices     Service[] @relation("ServiceRatings")

  // One-to-one relations with Seller and Buyer
  seller         Seller?
  buyer          Buyer?

  // Chat relations
  clientChatRooms    ChatRoom[] @relation("ClientChatRooms")
  freelancerChatRooms ChatRoom[] @relation("FreelancerChatRooms")
  sentMessages       Message[]
}

// Seller model (profile for sellers)
model Seller {
  id            String   @id @default(uuid())
  sellerProfile Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String    @unique
  rating        Int       // Seller rating (e.g., average of all ratings)
  totalEarnings Float     @default(0.0) // Total earnings for the seller
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relation with services offered by the seller
  services      Service[] @relation("SellerServices")
}

// Buyer model (profile for buyers)
model Buyer {
  id            String   @id @default(uuid())
  buyerProfile  Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String    @unique
  totalSpent    Float     @default(0.0) // Total amount spent by the buyer
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relation with services bought by the buyer
  purchases     Service[] @relation("BuyerPurchases")
}

// Account model (OAuth account)
model Account {
  id                Int       @id @default(autoincrement())
  lastProvider      String?   // Last provider used
  providers         String[]  // List of providers
  providerAccountId String?   // Provider-specific account ID
  userEmail         String    @unique // Links to AuthUser email
  user              AuthUser  @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  accessToken       String?   // OAuth access token
  refreshToken      String?   // OAuth refresh token
  expiresAt         Int?      // Token expiration timestamp
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// CategoryHierarchy model
model CategoryHierarchy {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  level       Int
  parentId    Int?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  parent      CategoryHierarchy?  @relation("Hierarchy", fields: [parentId], references: [id])
  children    CategoryHierarchy[] @relation("Hierarchy")
  services    Service[]           @relation("CategoryServices")

  // Many-to-many relation with Profile
  profiles    Profile[]           @relation("ProfileCategories")
}

// Service model
model Service {
  id            Int               @id @default(autoincrement())
  name          String
  price         String
  description   String?
  categoryId    Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  category      CategoryHierarchy @relation("CategoryServices", fields: [categoryId], references: [id])

  // Relation with ratings and users
  ratings       Rating[]          @relation("ServiceRatings")
  user          Profile?          @relation("UserServices", fields: [userId], references: [id])
  userId        String
  ratedBy       Profile[]         @relation("ServiceRatings")

  // Relations for Seller and Buyer
  seller        Seller?           @relation("SellerServices", fields: [sellerId], references: [id])
  sellerId      String?
  buyer         Buyer?            @relation("BuyerPurchases", fields: [buyerId], references: [id])
  buyerId       String?

  // New fields
  deliveryTime  Int
  revisions     Int
  features      String[]
  images        String[]
  tags          String[]
}

// Rating model
model Rating {
  id         Int      @id @default(autoincrement())
  buyerId    String    // ID of the buyer
  sellerId   String    // ID of the freelancer
  serviceId  Int       // ID of the service
  rating     Int       // Rating value (1-5)
  review     String?   // Optional review
  createdAt  DateTime  @default(now())

  // Relations
  buyer   Profile    @relation("BuyerRatings", fields: [buyerId], references: [id])
  seller  Profile    @relation("FreelancerRatings", fields: [sellerId], references: [id])
  service Service    @relation("ServiceRatings", fields: [serviceId], references: [id])
}

// Enums
enum Role {
  user
  admin
}

enum Level {
  beginner
  intermediate
  advanced
}

enum Plan {
  Travail_principal
  Travail_secondaire
  usage_personnel
}

enum Jobs {
  Graphisme_Design
  Programmation_Tech
  Marketing_digital
  Video_Animation
  Redaction_Traduction
  Musique_Audio
  Business
  Finance
  Services_IA
  Croissance_personnelle
  Consultations
  Photographie
}

// ChatRoom model for managing conversations
model ChatRoom {
  id           Int      @id @default(autoincrement())
  clientId     String
  freelancerId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  client       Profile  @relation("ClientChatRooms", fields: [clientId], references: [id])
  freelancer   Profile  @relation("FreelancerChatRooms", fields: [freelancerId], references: [id])
  messages     Message[]
}

// Message model for individual chat messages
model Message {
  id         Int      @id @default(autoincrement())
  chatRoomId Int
  senderId   String
  content    String
  createdAt  DateTime @default(now())

  // Relations
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  sender     Profile  @relation(fields: [senderId], references: [id])
}
